language: php


matrix:
  include:
    # Arbitrary PHP version to run the sniffs against.
    - php: '7.0'
      env: SNIFF=1

before_install:
  - if [[ "$SNIFF" == "1" ]]; then export PHPCS_DIR=/tmp/phpcs; fi
  - if [[ "$SNIFF" == "1" ]]; then export SNIFFS_DIR=/tmp/sniffs; fi
  # Install PHP_CodeSniffer.
  - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
  # Install WordPress Coding Standards.
  - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR; fi
  # Set install path for WordPress Coding Standards.
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs --config-set installed_paths $SNIFFS_DIR; fi
  # After CodeSniffer install you should refresh your path.
  - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi

script:
  # Run against WordPress Coding Standards.
  # If you use a custom ruleset, change `--standard=WordPress` to point to your ruleset file,
  # for example: `--standard=wpcs.xml`.
  # You can use any of the normal PHPCS command line arguments in the command:
  # https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs -p . --standard=WordPress; fi


# services:
# - docker

# # Install lando
# before_install:
#   - sudo apt-get -y update || true
#   - sudo apt-get -y install cgroup-bin curl
#   - curl -fsSL -o /tmp/lando-latest.deb http://installer.kalabox.io/lando-latest-dev.deb
#   - sudo dpkg -i /tmp/lando-latest.deb
#   - lando version

# # Do the lando magic
# script:

#   # Get our built out lando site running on travis
#   - lando start -- -v
#   - lando composer install
#   # Do needed things to get this repo transformed to what pantheon expects
#   - lando composer prepare-for-pantheon

  # Run non-db required tests eg linting/code standards/unit tests
  # Lint the codez
  # - lando phplint


  # - lando terminus auth:login --machine-token=$PANTHEON_MACHINE_TOKEN
  # - lando pull --code=none --database=dev --files=dev --rsync

  # # Check if we can bootstrap the site.
  # - cd web
  # - lando drush cr | grep "rebuild complete."
  # - cd ..

  # # Run Behat tests.
  # - lando behat --config=/app/tests/behat-pantheon.yml

  # # Do the multidev as needed
  # - |
  #   if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
  #     BRANCH=$(echo $TRAVIS_PULL_REQUEST_BRANCH | grep -v '^\(master\|[0-9]\+.x\)$')
  #     PR_ENV=${BRANCH:+pr-$BRANCH}
  #     DEFAULT_ENV=$(echo ${PR_ENV:-$TRAVIS_PULL_REQUEST_BRANCH} | tr '[:upper:]' '[:lower:]' | sed 's/[^0-9a-z-]//g' | cut -c -11 | sed 's/-$//')
  #     if ! lando terminus multidev:list $PANTHEON_SITE_NAME --field id | grep "$DEFAULT_ENV"; then
  #       lando terminus multidev:create $PANTHEON_SITE_NAME.dev $DEFAULT_ENV
  #     fi
  #     lando ssh -c "cd /tmp && git clone -b $DEFAULT_ENV ssh://codeserver.dev.\${PANTHEON_SITE}@codeserver.dev.\${PANTHEON_SITE}.drush.in:2222/~/repository.git pantheon_build"
  #     lando ssh -u root -c "rm -rf /tmp/pantheon_build/*"
  #     lando ssh -c "cp -rf /app/ /tmp/pantheon_build/"
  #     lando ssh -c "git -C /tmp/pantheon_build add -A"
  #     lando ssh -c "git -C /tmp/pantheon_build commit -m '$TRAVIS_COMMIT_MESSAGE'"
  #     lando ssh -c "git -C /tmp/pantheon_build push origin $DEFAULT_ENV"
  #   fi
  # # Clean up posted SSH key
  # - lando terminus ssh-key:remove $(ssh-keygen -l -f ~/.lando/keys/pantheon.lando.id_rsa.pub | awk -F' ' '{print $2}' | sed 's/://g')

# Merge into master via deploy script
# deploy:
#   provider: script
#   script: scripts/travis/deploy.sh $DEFAULT_ENV
#   on:
#     branch: master